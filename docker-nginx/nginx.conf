user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    server_tokens off;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    # 开启和关闭gzip模式
    gzip on;

    # gizp压缩起点，文件大于1k才进行压缩
    gzip_min_length 4k;

    # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间
    gzip_comp_level 5;

    # 进行压缩的文件类型。
    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/xml text/javascript application/json;

    # nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩，如果找不到则不进行压缩
    # gzip_static on|off

    # 是否在http header中添加Vary: Accept-Encoding，建议开启
    gzip_vary on;

    # 设置压缩所需要的缓冲区大小，以4k为单位，如果文件为7k则申请2*4k的缓冲区 
    gzip_buffers 4 32k;

    # 设置gzip压缩针对的HTTP协议版本
    # gzip_http_version 1.1;

    # 设置反向代理的数据启用压缩 如果需要
    gzip_proxied any;

    client_max_body_size 100m;

    # websocket
    map $http_upgrade $connection_upgrade {
      default upgrade;
      '' close;
    }

    #实时视频服务器
    upstream mdvr-live {
      server 10.1.254.153:9008;
    }

    include /etc/nginx/conf.d/*.conf;
}